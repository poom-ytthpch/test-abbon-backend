scalar Date

type Expense {
  id: String
  title: String
  amount: Float
  date: Date
  categoryId: String
  category: Category
  notes: String
  user: User
  userId: String
}

type Category {
  id: String
  name: String
}

type ExpensesReportResponse {
  amount: Float!
  category: String!
  userName: String!
  date: Date!
}

input CreateExpenseInput {
  title: String!
  amount: Float!
  categoryId: String!
  notes: String
  userId: String!
  date: Date!
}

input UpdateExpenseInput {
  id: String!
  title: String!
  amount: Float!
  categoryId: String!
  notes: String
  date: Date!
}

input CreateCategoriesInput {
  names: [String]
}

input CategoriesInput {
  take: Int!
  skip: Int!
}
input ExpensesInput {
  userId: String!
  startDate: Date!
  endDate: Date!
  take: Int!
  skip: Int!
}

input ExpensesReportInput {
  userId: String!
  startDate: Date!
  endDate: Date!
  take: Int!
  skip: Int!
}

type Query {
  categories(input: CategoriesInput): [Category]
  expenses(input: ExpensesInput!): [Expense]!
  expense(id: Int!): Expense
  expensesReport(input: ExpensesReportInput!): [ExpensesReportResponse]!
}

type Mutation {
  createCategories(input: CreateCategoriesInput!): [Category]!
  createExpense(input: CreateExpenseInput!): Expense!
  updateExpense(input: UpdateExpenseInput!): Expense!
  removeExpense(id: ID!): Expense
}
